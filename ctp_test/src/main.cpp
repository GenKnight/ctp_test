#include <iostream>
#include <stdio.h>
#include <string>
#include <unordered_map>
#include <mutex>
#include "CustomMdSpi.h"
#include "CustomTradeSpi.h"
#include "TickToKlineHelper.h"

using namespace std;

//#define  MD

// ---- 全局变量 ---- //
// 公共参数
TThostFtdcBrokerIDType gBrokerID = "9999";                              // 模拟经纪商代码
TThostFtdcInvestorIDType gInvesterID = "087652";                        // 投资者账户名
TThostFtdcPasswordType gInvesterPassword = "963852";                    // 投资者密码
int requestID = 0; // 请求编号

// 行情参数
char md_con_dir[] = "./md_con/";
CThostFtdcMdApi *g_pMdUserApi = nullptr;                           // 行情指针
char gMdFrontAddr[] = "tcp://180.168.146.187:10010";               // 模拟行情前置地址
//char *g_pInstrumentID[] = {"TF1712", "ag1712", "m1712", "SR811"};  // 行情合约代码列表，中、上、大、郑交易所各选一种
//int instrumentNum = 4;                                             // 行情合约订阅数量
char *g_pInstrumentID[] = { "ag1712" };                            // 行情合约代码列表，中、上、大、郑交易所各选一种
int instrumentNum = 1;                                             // 行情合约订阅数量
unordered_map<string, TickToKlineHelper> g_KlineHash;              // 不同合约的k线存储表
std::mutex marketDataMutex;

// 交易参数
char tr_con_dir[] = "./tr_con/";
CThostFtdcTraderApi *g_pTradeUserApi = nullptr;                    // 交易指针
char gTradeFrontAddr[] = "tcp://180.168.146.187:10030";            // 模拟交易前置地址
TThostFtdcInstrumentIDType g_pTradeInstrumentID = "m1709";         // 所交易的合约代码

int main()
{
#ifdef MD
	// 初始化行情线程
	cout << "初始化行情..." << endl;
    g_pMdUserApi = CThostFtdcMdApi::CreateFtdcMdApi(md_con_dir);   // 创建行情实例
	CThostFtdcMdSpi *pMdUserSpi = new CustomMdSpi();       // 创建行情回调实例
	g_pMdUserApi->RegisterSpi(pMdUserSpi);               // 注册事件类
	g_pMdUserApi->RegisterFront(gMdFrontAddr);           // 设置行情前置地址
	g_pMdUserApi->Init();                                // 连接运行
#endif	


	// 初始化交易线程
	cout << "初始化交易..." << endl;
    g_pTradeUserApi = CThostFtdcTraderApi::CreateFtdcTraderApi(tr_con_dir); // 创建交易实例
	CThostFtdcTraderSpi *pTradeSpi = new CustomTradeSpi();
	//CustomTradeSpi *pTradeSpi = new CustomTradeSpi;                 // 创建交易回调实例
	g_pTradeUserApi->RegisterSpi(pTradeSpi);                        // 注册事件类
    g_pTradeUserApi->RegisterFront(gTradeFrontAddr);                // 设置交易前置地址
	g_pTradeUserApi->SubscribePublicTopic(THOST_TERT_RESTART);      // 订阅公共流
    g_pTradeUserApi->SubscribePrivateTopic(THOST_TERT_RESUME);     // 订阅私有流
	g_pTradeUserApi->Init();                                        // 连接运行
		
#ifdef MD
	// 等到线程退出
	g_pMdUserApi->Join();
	delete pMdUserSpi;
	g_pMdUserApi->Release();
#endif
	g_pTradeUserApi->Join();
	delete pTradeSpi;
	g_pTradeUserApi->Release();

	// 转换本地k线数据
	//TickToKlineHelper tickToKlineHelper;
	//tickToKlineHelper.KLineFromLocalData("market_data.csv", "K_line_data.csv");
	
	getchar();
	return 0;
}